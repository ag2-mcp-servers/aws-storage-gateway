# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:02:52+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, SecretStr, conint, constr


class ActivationKey(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class ActiveDirectoryStatus(Enum):
    ACCESS_DENIED = 'ACCESS_DENIED'
    DETACHED = 'DETACHED'
    JOINED = 'JOINED'
    JOINING = 'JOINING'
    NETWORK_ERROR = 'NETWORK_ERROR'
    TIMEOUT = 'TIMEOUT'
    UNKNOWN_ERROR = 'UNKNOWN_ERROR'


class AuditDestinationARN(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class Authentication(RootModel[constr(min_length=5, max_length=15)]):
    root: constr(min_length=5, max_length=15) = Field(
        ...,
        description='<p>The authentication method of the file share. The default is <code>ActiveDirectory</code>.</p> <p>Valid Values: <code>ActiveDirectory</code> | <code>GuestAccess</code> </p>',
    )


class AvailabilityMonitorTestStatus(Enum):
    COMPLETE = 'COMPLETE'
    FAILED = 'FAILED'
    PENDING = 'PENDING'


class BandwidthDownloadRateLimit(RootModel[conint(ge=102400)]):
    root: conint(ge=102400)


class BandwidthType(RootModel[constr(min_length=3, max_length=25)]):
    root: constr(min_length=3, max_length=25)


class BandwidthUploadRateLimit(RootModel[conint(ge=51200)]):
    root: conint(ge=51200)


class Boolean(RootModel[bool]):
    root: bool


class CacheStaleTimeoutInSeconds(RootModel[int]):
    root: int


class CaseSensitivity(Enum):
    ClientSpecified = 'ClientSpecified'
    CaseSensitive = 'CaseSensitive'


class ChapSecret(RootModel[SecretStr]):
    root: SecretStr


class ClientToken(RootModel[constr(min_length=5, max_length=100)]):
    root: constr(min_length=5, max_length=100)


class CloudWatchLogGroupARN(RootModel[constr(max_length=562)]):
    root: constr(max_length=562)


class CreatedDate(RootModel[datetime]):
    root: datetime


class DNSHostName(
    RootModel[
        constr(
            pattern=r'^(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])$',
        min_length=1,
        max_length=255,
    )


class DayOfMonth(RootModel[conint(ge=1, le=28)]):
    root: conint(ge=1, le=28)


class DayOfWeek(RootModel[conint(ge=0, le=6)]):
    root: conint(ge=0, le=6)


class DaysOfWeek(RootModel[List[DayOfWeek]]):
    root: List[DayOfWeek] = Field(..., max_length=7, min_length=1)


class DeprecationDate(RootModel[constr(min_length=1, max_length=25)]):
    root: constr(min_length=1, max_length=25)


class Description(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class DeviceType(RootModel[constr(min_length=2, max_length=50)]):
    root: constr(min_length=2, max_length=50)


class DiskAllocationType(RootModel[constr(min_length=3, max_length=100)]):
    root: constr(min_length=3, max_length=100) = Field(
        ...,
        description='<p>One of the <code>DiskAllocationType</code> enumeration values that identifies how a local disk is used.</p> <p>Valid Values: <code>UPLOAD_BUFFER</code> | <code>CACHE_STORAGE</code> </p>',
    )


class DiskAttribute(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class DiskAttributeList(RootModel[List[DiskAttribute]]):
    root: List[DiskAttribute] = Field(
        ...,
        description='A list of values that represents attributes of a local disk.',
        max_length=10,
        min_length=0,
    )


class DiskId(RootModel[constr(min_length=1, max_length=300)]):
    root: constr(min_length=1, max_length=300)


class DiskIds(RootModel[List[DiskId]]):
    root: List[DiskId]


class DomainName(
    RootModel[
        constr(
            pattern=r'^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^([a-zA-Z0-9]+[\\.-])+([a-zA-Z0-9])+$', min_length=1, max_length=1024
    )


class DomainUserName(
    RootModel[constr(pattern=r'^\w[\w\.\- ]*$', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'^\w[\w\.\- ]*$', min_length=1, max_length=1024)


class DomainUserPassword(RootModel[SecretStr]):
    root: SecretStr


class DoubleObject(RootModel[float]):
    root: float


class Ec2InstanceId(RootModel[str]):
    root: str


class Ec2InstanceRegion(RootModel[str]):
    root: str


class EndpointType(RootModel[constr(min_length=4, max_length=8)]):
    root: constr(min_length=4, max_length=8)


class FileShareARN(RootModel[constr(min_length=50, max_length=500)]):
    root: constr(min_length=50, max_length=500) = Field(
        ..., description='The Amazon Resource Name (ARN) of the file share.'
    )


class FileShareARNList(RootModel[List[FileShareARN]]):
    root: List[FileShareARN] = Field(..., max_length=10, min_length=1)


class FileShareId(RootModel[constr(min_length=12, max_length=30)]):
    root: constr(min_length=12, max_length=30) = Field(
        ..., description='The ID of the file share.'
    )


class FileShareName(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class FileShareStatus(RootModel[constr(min_length=3, max_length=50)]):
    root: constr(min_length=3, max_length=50) = Field(
        ...,
        description='<p>The status of the file share.</p> <p>Valid Values: <code>CREATING</code> | <code>UPDATING</code> | <code>AVAILABLE</code> | <code>DELETING</code> </p>',
    )


class FileShareType(Enum):
    NFS = 'NFS'
    SMB = 'SMB'


class FileSystemAssociationARN(RootModel[constr(min_length=50, max_length=500)]):
    root: constr(min_length=50, max_length=500)


class FileSystemAssociationARNList(RootModel[List[FileSystemAssociationARN]]):
    root: List[FileSystemAssociationARN] = Field(..., max_length=10, min_length=1)


class FileSystemAssociationId(RootModel[constr(min_length=10, max_length=30)]):
    root: constr(min_length=10, max_length=30)


class FileSystemAssociationStatus(RootModel[constr(min_length=3, max_length=50)]):
    root: constr(min_length=3, max_length=50)


class FileSystemAssociationSyncErrorCode(RootModel[str]):
    root: str


class FileSystemLocationARN(RootModel[constr(min_length=8, max_length=512)]):
    root: constr(min_length=8, max_length=512)


class Folder(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class FolderList(RootModel[List[Folder]]):
    root: List[Folder] = Field(..., max_length=50, min_length=1)


class GatewayARN(RootModel[constr(min_length=50, max_length=500)]):
    root: constr(min_length=50, max_length=500) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.',
    )


class GatewayCapacity(Enum):
    Small = 'Small'
    Medium = 'Medium'
    Large = 'Large'


class GatewayId(RootModel[constr(min_length=12, max_length=30)]):
    root: constr(min_length=12, max_length=30)


class GatewayName(
    RootModel[
        constr(
            pattern=r'^[ -\.0-\[\]-~]*[!-\.0-\[\]-~][ -\.0-\[\]-~]*$',
            min_length=2,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^[ -\.0-\[\]-~]*[!-\.0-\[\]-~][ -\.0-\[\]-~]*$',
        min_length=2,
        max_length=255,
    ) = Field(..., description='The name you configured for your gateway.')


class GatewayOperationalState(RootModel[constr(min_length=2, max_length=25)]):
    root: constr(min_length=2, max_length=25)


class GatewayState(RootModel[constr(min_length=2, max_length=25)]):
    root: constr(min_length=2, max_length=25)


class GatewayTimezone(RootModel[constr(min_length=3, max_length=10)]):
    root: constr(min_length=3, max_length=10)


class GatewayType(RootModel[constr(min_length=2, max_length=20)]):
    root: constr(min_length=2, max_length=20)


class Host(
    RootModel[
        constr(
            pattern=r'^(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])(:(\d+))?$',
            min_length=6,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^(([a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9\-]*[A-Za-z0-9])(:(\d+))?$',
        min_length=6,
        max_length=1024,
    )


class HostEnvironment(Enum):
    VMWARE = 'VMWARE'
    HYPER_V = 'HYPER-V'
    EC2 = 'EC2'
    KVM = 'KVM'
    OTHER = 'OTHER'
    SNOWBALL = 'SNOWBALL'


class HostEnvironmentId(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class Hosts(RootModel[List[Host]]):
    root: List[Host]


class HourOfDay(RootModel[conint(ge=0, le=23)]):
    root: conint(ge=0, le=23)


class IPV4Address(
    RootModel[
        constr(
            pattern=r'^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}',
            min_length=7,
            max_length=15,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}',
        min_length=7,
        max_length=15,
    )


class IPV4AddressCIDR(
    RootModel[
        constr(
            pattern=r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
        )
    ]
):
    root: constr(
        pattern=r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
    )


class Initiator(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class Initiators(RootModel[List[Initiator]]):
    root: List[Initiator]


class InternalServerError(RootModel[Any]):
    root: Any


class InvalidGatewayRequestException(RootModel[Any]):
    root: Any


class IpAddressList(RootModel[List[IPV4Address]]):
    root: List[IPV4Address] = Field(..., max_length=1, min_length=0)


class IqnName(RootModel[constr(pattern=r'[0-9a-z:.-]+', min_length=1, max_length=255)]):
    root: constr(pattern=r'[0-9a-z:.-]+', min_length=1, max_length=255)


class JoinDomainOutput(BaseModel):
    ActiveDirectoryStatus_1: Optional[ActiveDirectoryStatus] = Field(
        None, alias='ActiveDirectoryStatus'
    )
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class KMSKey(
    RootModel[
        constr(
            pattern=r'(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)',
            min_length=7,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)/(\S+)$)|(^alias/(\S+)$)',
        min_length=7,
        max_length=2048,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.',
    )


class LastSoftwareUpdate(RootModel[constr(min_length=1, max_length=25)]):
    root: constr(min_length=1, max_length=25)


class ListAutomaticTapeCreationPoliciesInput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class ListLocalDisksInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class ListVolumeInitiatorsOutput(BaseModel):
    Initiators_1: Optional[Initiators] = Field(None, alias='Initiators')


class ListVolumeRecoveryPointsInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class LocalConsolePassword(RootModel[SecretStr]):
    root: SecretStr


class LocationARN(RootModel[constr(min_length=16, max_length=1400)]):
    root: constr(min_length=16, max_length=1400) = Field(
        ...,
        description='<p>A custom ARN for the backend storage used for storing data for file shares. It includes a resource ARN with an optional prefix concatenation. The prefix must end with a forward slash (/).</p> <note> <p>You can specify LocationARN as a bucket ARN, access point ARN or access point alias, as shown in the following examples.</p> <p>Bucket ARN:</p> <p> <code>arn:aws:s3:::my-bucket/prefix/</code> </p> <p>Access point ARN:</p> <p> <code>arn:aws:s3:region:account-id:accesspoint/access-point-name/prefix/</code> </p> <p>If you specify an access point, the bucket policy must be configured to delegate access control to the access point. For information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points-policies.html#access-points-delegating-control">Delegating access control to access points</a> in the <i>Amazon S3 User Guide</i>.</p> <p>Access point alias:</p> <p> <code>test-ap-ab123cdef4gehijklmn5opqrstuvuse1a-s3alias</code> </p> </note>',
    )


class Marker(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class MediumChangerType(RootModel[constr(min_length=2, max_length=50)]):
    root: constr(min_length=2, max_length=50)


class MinimumNumTapes(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class MinuteOfHour(RootModel[conint(ge=0, le=59)]):
    root: conint(ge=0, le=59)


class NetworkInterfaceId(
    RootModel[
        constr(
            pattern=r'\A(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\z'
        )
    ]
):
    root: constr(
        pattern=r'\A(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\z'
    )


class NextUpdateAvailabilityDate(RootModel[constr(min_length=1, max_length=25)]):
    root: constr(min_length=1, max_length=25)


class NotificationId(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048) = Field(
        ...,
        description='The randomly generated ID of the notification that was sent. This ID is in UUID format.',
    )


class NotificationPolicy(
    RootModel[constr(pattern=r'^\{[\w\s:\{\}\[\]"]*}$', min_length=2, max_length=100)]
):
    root: constr(pattern=r'^\{[\w\s:\{\}\[\]"]*}$', min_length=2, max_length=100)


class NotifyWhenUploadedInput(BaseModel):
    FileShareARN_1: FileShareARN = Field(..., alias='FileShareARN')


class NotifyWhenUploadedOutput(BaseModel):
    FileShareARN_1: Optional[FileShareARN] = Field(None, alias='FileShareARN')
    NotificationId_1: Optional[NotificationId] = Field(None, alias='NotificationId')


class NumTapesToCreate(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class ObjectACL(Enum):
    private = 'private'
    public_read = 'public-read'
    public_read_write = 'public-read-write'
    authenticated_read = 'authenticated-read'
    bucket_owner_read = 'bucket-owner-read'
    bucket_owner_full_control = 'bucket-owner-full-control'
    aws_exec_read = 'aws-exec-read'


class OrganizationalUnit(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class Path(RootModel[str]):
    root: str = Field(
        ...,
        description='The file share path used by the NFS client to identify the mount point.',
    )


class PermissionId(RootModel[conint(ge=0, le=4294967294)]):
    root: conint(ge=0, le=4294967294)


class PermissionMode(
    RootModel[constr(pattern=r'^[0-7]{4}$', min_length=1, max_length=4)]
):
    root: constr(pattern=r'^[0-7]{4}$', min_length=1, max_length=4)


class PoolARN(RootModel[constr(min_length=50, max_length=500)]):
    root: constr(min_length=50, max_length=500)


class PoolARNs(RootModel[List[PoolARN]]):
    root: List[PoolARN]


class PoolId(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class PoolName(
    RootModel[
        constr(
            pattern=r'^[ -\.0-\[\]-~]*[!-\.0-\[\]-~][ -\.0-\[\]-~]*$',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'^[ -\.0-\[\]-~]*[!-\.0-\[\]-~][ -\.0-\[\]-~]*$',
        min_length=1,
        max_length=100,
    )


class PoolStatus(Enum):
    ACTIVE = 'ACTIVE'
    DELETED = 'DELETED'


class PositiveIntObject(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class RecurrenceInHours(RootModel[conint(ge=1, le=24)]):
    root: conint(ge=1, le=24)


class RefreshCacheInput(BaseModel):
    FileShareARN_1: FileShareARN = Field(..., alias='FileShareARN')
    FolderList_1: Optional[FolderList] = Field(None, alias='FolderList')
    Recursive: Optional[Boolean] = None


class RefreshCacheOutput(BaseModel):
    FileShareARN_1: Optional[FileShareARN] = Field(None, alias='FileShareARN')
    NotificationId_1: Optional[NotificationId] = Field(None, alias='NotificationId')


class RegionId(RootModel[constr(min_length=1, max_length=25)]):
    root: constr(min_length=1, max_length=25)


class ResetCacheInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class ResetCacheOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class ResourceARN(RootModel[constr(min_length=50, max_length=500)]):
    root: constr(min_length=50, max_length=500)


class RetentionLockTimeInDays(RootModel[conint(ge=0, le=36500)]):
    root: conint(ge=0, le=36500)


class RetentionLockType(Enum):
    COMPLIANCE = 'COMPLIANCE'
    GOVERNANCE = 'GOVERNANCE'
    NONE = 'NONE'


class Role(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov):iam::([0-9]+):role/(\S+)$',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov):iam::([0-9]+):role/(\S+)$',
        min_length=20,
        max_length=2048,
    ) = Field(
        ...,
        description='The ARN of the IAM role that an S3 File Gateway assumes when it accesses the underlying storage.',
    )


class SMBGuestPassword(RootModel[SecretStr]):
    root: SecretStr


class SMBSecurityStrategy(Enum):
    ClientSpecified = 'ClientSpecified'
    MandatorySigning = 'MandatorySigning'
    MandatoryEncryption = 'MandatoryEncryption'


class ServiceUnavailableError(RootModel[Any]):
    root: Any


class SetLocalConsolePasswordInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    LocalConsolePassword_1: LocalConsolePassword = Field(
        ..., alias='LocalConsolePassword'
    )


class SetLocalConsolePasswordOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class SetSMBGuestPasswordInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    Password: SMBGuestPassword


class SetSMBGuestPasswordOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class ShutdownGatewayInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class ShutdownGatewayOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class SnapshotDescription(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class SnapshotId(
    RootModel[constr(pattern=r'\Asnap-([0-9A-Fa-f]{8}|[0-9A-Fa-f]{17})\z')]
):
    root: constr(pattern=r'\Asnap-([0-9A-Fa-f]{8}|[0-9A-Fa-f]{17})\z')


class SoftwareUpdatesEndDate(RootModel[constr(min_length=1, max_length=25)]):
    root: constr(min_length=1, max_length=25)


class Squash(RootModel[constr(min_length=5, max_length=15)]):
    root: constr(min_length=5, max_length=15) = Field(
        ...,
        description='<p>The user mapped to anonymous user. Valid options are the following:</p> <ul> <li> <p> <code>RootSquash</code>: Only root is mapped to anonymous user.</p> </li> <li> <p> <code>NoSquash</code>: No one is mapped to anonymous user.</p> </li> <li> <p> <code>AllSquash</code>: Everyone is mapped to anonymous user.</p> </li> </ul>',
    )


class StartAvailabilityMonitorTestInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class StartAvailabilityMonitorTestOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class StartGatewayInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class StartGatewayOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class StorageClass(RootModel[constr(min_length=5, max_length=50)]):
    root: constr(min_length=5, max_length=50) = Field(..., description='<p/>')


class SupportedGatewayCapacities(RootModel[List[GatewayCapacity]]):
    root: List[GatewayCapacity]


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class TapeARN(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\-0-9]+:[0-9]+:tape\/[0-9A-Z]{5,16}$',
            min_length=50,
            max_length=500,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov):storagegateway:[a-z\-0-9]+:[0-9]+:tape\/[0-9A-Z]{5,16}$',
        min_length=50,
        max_length=500,
    )


class TapeARNs(RootModel[List[TapeARN]]):
    root: List[TapeARN] = Field(
        ...,
        description="The Amazon Resource Name (ARN) of each of the tapes you want to list. If you don't specify a tape ARN, the response lists all tapes in both your VTL and VTS.",
    )


class TapeArchiveStatus(RootModel[str]):
    root: str


class TapeBarcode(
    RootModel[constr(pattern=r'^[A-Z0-9]*$', min_length=5, max_length=16)]
):
    root: constr(pattern=r'^[A-Z0-9]*$', min_length=5, max_length=16)


class TapeBarcodePrefix(
    RootModel[constr(pattern=r'^[A-Z]*$', min_length=1, max_length=4)]
):
    root: constr(pattern=r'^[A-Z]*$', min_length=1, max_length=4)


class TapeDriveType(RootModel[constr(min_length=2, max_length=50)]):
    root: constr(min_length=2, max_length=50)


class TapeRecoveryPointStatus(RootModel[str]):
    root: str


class TapeSize(RootModel[int]):
    root: int


class TapeStatus(RootModel[str]):
    root: str


class TapeStorageClass(Enum):
    DEEP_ARCHIVE = 'DEEP_ARCHIVE'
    GLACIER = 'GLACIER'


class TapeUsage(RootModel[int]):
    root: int


class TargetARN(RootModel[constr(min_length=50, max_length=800)]):
    root: constr(min_length=50, max_length=800)


class TargetName(
    RootModel[constr(pattern=r'^[-\.;a-z0-9]+$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[-\.;a-z0-9]+$', min_length=1, max_length=200)


class Time(RootModel[datetime]):
    root: datetime


class TimeoutInSeconds(RootModel[conint(ge=0, le=3600)]):
    root: conint(ge=0, le=3600)


class UpdateAutomaticTapeCreationPolicyOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class UpdateBandwidthRateLimitInput(BaseModel):
    AverageDownloadRateLimitInBitsPerSec: Optional[BandwidthDownloadRateLimit] = None
    AverageUploadRateLimitInBitsPerSec: Optional[BandwidthUploadRateLimit] = None
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class UpdateBandwidthRateLimitOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class UpdateBandwidthRateLimitScheduleOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class UpdateChapCredentialsInput(BaseModel):
    InitiatorName: IqnName
    SecretToAuthenticateInitiator: ChapSecret
    SecretToAuthenticateTarget: Optional[ChapSecret] = None
    TargetARN_1: TargetARN = Field(..., alias='TargetARN')


class UpdateChapCredentialsOutput(BaseModel):
    InitiatorName: Optional[IqnName] = None
    TargetARN_1: Optional[TargetARN] = Field(None, alias='TargetARN')


class UpdateFileSystemAssociationOutput(BaseModel):
    FileSystemAssociationARN_1: Optional[FileSystemAssociationARN] = Field(
        None, alias='FileSystemAssociationARN'
    )


class UpdateGatewayInformationInput(BaseModel):
    CloudWatchLogGroupARN_1: Optional[CloudWatchLogGroupARN] = Field(
        None, alias='CloudWatchLogGroupARN'
    )
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    GatewayCapacity_1: Optional[GatewayCapacity] = Field(None, alias='GatewayCapacity')
    GatewayName_1: Optional[GatewayName] = Field(None, alias='GatewayName')
    GatewayTimezone_1: Optional[GatewayTimezone] = Field(None, alias='GatewayTimezone')


class UpdateGatewaySoftwareNowInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class UpdateGatewaySoftwareNowOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class UpdateMaintenanceStartTimeInput(BaseModel):
    DayOfMonth_1: Optional[DayOfMonth] = Field(None, alias='DayOfMonth')
    DayOfWeek_1: Optional[DayOfWeek] = Field(None, alias='DayOfWeek')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    HourOfDay_1: HourOfDay = Field(..., alias='HourOfDay')
    MinuteOfHour_1: MinuteOfHour = Field(..., alias='MinuteOfHour')


class UpdateMaintenanceStartTimeOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class UpdateNFSFileShareOutput(BaseModel):
    FileShareARN_1: Optional[FileShareARN] = Field(None, alias='FileShareARN')


class UpdateSMBFileShareOutput(BaseModel):
    FileShareARN_1: Optional[FileShareARN] = Field(None, alias='FileShareARN')


class UpdateSMBFileShareVisibilityInput(BaseModel):
    FileSharesVisible: Boolean
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class UpdateSMBFileShareVisibilityOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class UpdateSMBLocalGroupsOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class UpdateSMBSecurityStrategyInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    SMBSecurityStrategy_1: SMBSecurityStrategy = Field(..., alias='SMBSecurityStrategy')


class UpdateSMBSecurityStrategyOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class UserListUser(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class VTLDeviceARN(RootModel[constr(min_length=50, max_length=500)]):
    root: constr(min_length=50, max_length=500)


class VTLDeviceARNs(RootModel[List[VTLDeviceARN]]):
    root: List[VTLDeviceARN]


class VTLDeviceProductIdentifier(RootModel[str]):
    root: str


class VTLDeviceType(RootModel[str]):
    root: str


class VTLDeviceVendor(RootModel[str]):
    root: str


class VolumeARN(RootModel[constr(min_length=50, max_length=500)]):
    root: constr(min_length=50, max_length=500)


class VolumeARNs(RootModel[List[VolumeARN]]):
    root: List[VolumeARN]


class VolumeAttachmentStatus(RootModel[constr(min_length=3, max_length=50)]):
    root: constr(min_length=3, max_length=50)


class VolumeId(RootModel[constr(min_length=12, max_length=30)]):
    root: constr(min_length=12, max_length=30)


class VolumeStatus(RootModel[constr(min_length=3, max_length=50)]):
    root: constr(min_length=3, max_length=50)


class VolumeType(RootModel[constr(min_length=3, max_length=100)]):
    root: constr(min_length=3, max_length=100)


class VolumeUsedInBytes(RootModel[int]):
    root: int


class Double(RootModel[float]):
    root: float


class Integer(RootModel[int]):
    root: int


class Long(RootModel[int]):
    root: int


class String(RootModel[str]):
    root: str


class XAmzTarget(Enum):
    StorageGateway_20130630_ActivateGateway = 'StorageGateway_20130630.ActivateGateway'


class XAmzTarget1(Enum):
    StorageGateway_20130630_AddCache = 'StorageGateway_20130630.AddCache'


class XAmzTarget2(Enum):
    StorageGateway_20130630_AddTagsToResource = (
        'StorageGateway_20130630.AddTagsToResource'
    )


class XAmzTarget3(Enum):
    StorageGateway_20130630_AddUploadBuffer = 'StorageGateway_20130630.AddUploadBuffer'


class XAmzTarget4(Enum):
    StorageGateway_20130630_AddWorkingStorage = (
        'StorageGateway_20130630.AddWorkingStorage'
    )


class XAmzTarget5(Enum):
    StorageGateway_20130630_AssignTapePool = 'StorageGateway_20130630.AssignTapePool'


class XAmzTarget6(Enum):
    StorageGateway_20130630_AssociateFileSystem = (
        'StorageGateway_20130630.AssociateFileSystem'
    )


class XAmzTarget7(Enum):
    StorageGateway_20130630_AttachVolume = 'StorageGateway_20130630.AttachVolume'


class XAmzTarget8(Enum):
    StorageGateway_20130630_CancelArchival = 'StorageGateway_20130630.CancelArchival'


class XAmzTarget9(Enum):
    StorageGateway_20130630_CancelRetrieval = 'StorageGateway_20130630.CancelRetrieval'


class XAmzTarget10(Enum):
    StorageGateway_20130630_CreateCachediSCSIVolume = (
        'StorageGateway_20130630.CreateCachediSCSIVolume'
    )


class XAmzTarget11(Enum):
    StorageGateway_20130630_CreateNFSFileShare = (
        'StorageGateway_20130630.CreateNFSFileShare'
    )


class XAmzTarget12(Enum):
    StorageGateway_20130630_CreateSMBFileShare = (
        'StorageGateway_20130630.CreateSMBFileShare'
    )


class XAmzTarget13(Enum):
    StorageGateway_20130630_CreateSnapshot = 'StorageGateway_20130630.CreateSnapshot'


class XAmzTarget14(Enum):
    StorageGateway_20130630_CreateSnapshotFromVolumeRecoveryPoint = (
        'StorageGateway_20130630.CreateSnapshotFromVolumeRecoveryPoint'
    )


class XAmzTarget15(Enum):
    StorageGateway_20130630_CreateStorediSCSIVolume = (
        'StorageGateway_20130630.CreateStorediSCSIVolume'
    )


class XAmzTarget16(Enum):
    StorageGateway_20130630_CreateTapePool = 'StorageGateway_20130630.CreateTapePool'


class XAmzTarget17(Enum):
    StorageGateway_20130630_CreateTapeWithBarcode = (
        'StorageGateway_20130630.CreateTapeWithBarcode'
    )


class XAmzTarget18(Enum):
    StorageGateway_20130630_CreateTapes = 'StorageGateway_20130630.CreateTapes'


class XAmzTarget19(Enum):
    StorageGateway_20130630_DeleteAutomaticTapeCreationPolicy = (
        'StorageGateway_20130630.DeleteAutomaticTapeCreationPolicy'
    )


class XAmzTarget20(Enum):
    StorageGateway_20130630_DeleteBandwidthRateLimit = (
        'StorageGateway_20130630.DeleteBandwidthRateLimit'
    )


class XAmzTarget21(Enum):
    StorageGateway_20130630_DeleteChapCredentials = (
        'StorageGateway_20130630.DeleteChapCredentials'
    )


class XAmzTarget22(Enum):
    StorageGateway_20130630_DeleteFileShare = 'StorageGateway_20130630.DeleteFileShare'


class XAmzTarget23(Enum):
    StorageGateway_20130630_DeleteGateway = 'StorageGateway_20130630.DeleteGateway'


class XAmzTarget24(Enum):
    StorageGateway_20130630_DeleteSnapshotSchedule = (
        'StorageGateway_20130630.DeleteSnapshotSchedule'
    )


class XAmzTarget25(Enum):
    StorageGateway_20130630_DeleteTape = 'StorageGateway_20130630.DeleteTape'


class XAmzTarget26(Enum):
    StorageGateway_20130630_DeleteTapeArchive = (
        'StorageGateway_20130630.DeleteTapeArchive'
    )


class XAmzTarget27(Enum):
    StorageGateway_20130630_DeleteTapePool = 'StorageGateway_20130630.DeleteTapePool'


class XAmzTarget28(Enum):
    StorageGateway_20130630_DeleteVolume = 'StorageGateway_20130630.DeleteVolume'


class XAmzTarget29(Enum):
    StorageGateway_20130630_DescribeAvailabilityMonitorTest = (
        'StorageGateway_20130630.DescribeAvailabilityMonitorTest'
    )


class XAmzTarget30(Enum):
    StorageGateway_20130630_DescribeBandwidthRateLimit = (
        'StorageGateway_20130630.DescribeBandwidthRateLimit'
    )


class XAmzTarget31(Enum):
    StorageGateway_20130630_DescribeBandwidthRateLimitSchedule = (
        'StorageGateway_20130630.DescribeBandwidthRateLimitSchedule'
    )


class XAmzTarget32(Enum):
    StorageGateway_20130630_DescribeCache = 'StorageGateway_20130630.DescribeCache'


class XAmzTarget33(Enum):
    StorageGateway_20130630_DescribeCachediSCSIVolumes = (
        'StorageGateway_20130630.DescribeCachediSCSIVolumes'
    )


class XAmzTarget34(Enum):
    StorageGateway_20130630_DescribeChapCredentials = (
        'StorageGateway_20130630.DescribeChapCredentials'
    )


class XAmzTarget35(Enum):
    StorageGateway_20130630_DescribeFileSystemAssociations = (
        'StorageGateway_20130630.DescribeFileSystemAssociations'
    )


class XAmzTarget36(Enum):
    StorageGateway_20130630_DescribeGatewayInformation = (
        'StorageGateway_20130630.DescribeGatewayInformation'
    )


class XAmzTarget37(Enum):
    StorageGateway_20130630_DescribeMaintenanceStartTime = (
        'StorageGateway_20130630.DescribeMaintenanceStartTime'
    )


class XAmzTarget38(Enum):
    StorageGateway_20130630_DescribeNFSFileShares = (
        'StorageGateway_20130630.DescribeNFSFileShares'
    )


class XAmzTarget39(Enum):
    StorageGateway_20130630_DescribeSMBFileShares = (
        'StorageGateway_20130630.DescribeSMBFileShares'
    )


class XAmzTarget40(Enum):
    StorageGateway_20130630_DescribeSMBSettings = (
        'StorageGateway_20130630.DescribeSMBSettings'
    )


class XAmzTarget41(Enum):
    StorageGateway_20130630_DescribeSnapshotSchedule = (
        'StorageGateway_20130630.DescribeSnapshotSchedule'
    )


class XAmzTarget42(Enum):
    StorageGateway_20130630_DescribeStorediSCSIVolumes = (
        'StorageGateway_20130630.DescribeStorediSCSIVolumes'
    )


class XAmzTarget43(Enum):
    StorageGateway_20130630_DescribeTapeArchives = (
        'StorageGateway_20130630.DescribeTapeArchives'
    )


class XAmzTarget44(Enum):
    StorageGateway_20130630_DescribeTapeRecoveryPoints = (
        'StorageGateway_20130630.DescribeTapeRecoveryPoints'
    )


class XAmzTarget45(Enum):
    StorageGateway_20130630_DescribeTapes = 'StorageGateway_20130630.DescribeTapes'


class XAmzTarget46(Enum):
    StorageGateway_20130630_DescribeUploadBuffer = (
        'StorageGateway_20130630.DescribeUploadBuffer'
    )


class XAmzTarget47(Enum):
    StorageGateway_20130630_DescribeVTLDevices = (
        'StorageGateway_20130630.DescribeVTLDevices'
    )


class XAmzTarget48(Enum):
    StorageGateway_20130630_DescribeWorkingStorage = (
        'StorageGateway_20130630.DescribeWorkingStorage'
    )


class XAmzTarget49(Enum):
    StorageGateway_20130630_DetachVolume = 'StorageGateway_20130630.DetachVolume'


class XAmzTarget50(Enum):
    StorageGateway_20130630_DisableGateway = 'StorageGateway_20130630.DisableGateway'


class XAmzTarget51(Enum):
    StorageGateway_20130630_DisassociateFileSystem = (
        'StorageGateway_20130630.DisassociateFileSystem'
    )


class XAmzTarget52(Enum):
    StorageGateway_20130630_JoinDomain = 'StorageGateway_20130630.JoinDomain'


class XAmzTarget53(Enum):
    StorageGateway_20130630_ListAutomaticTapeCreationPolicies = (
        'StorageGateway_20130630.ListAutomaticTapeCreationPolicies'
    )


class XAmzTarget54(Enum):
    StorageGateway_20130630_ListFileShares = 'StorageGateway_20130630.ListFileShares'


class XAmzTarget55(Enum):
    StorageGateway_20130630_ListFileSystemAssociations = (
        'StorageGateway_20130630.ListFileSystemAssociations'
    )


class XAmzTarget56(Enum):
    StorageGateway_20130630_ListGateways = 'StorageGateway_20130630.ListGateways'


class XAmzTarget57(Enum):
    StorageGateway_20130630_ListLocalDisks = 'StorageGateway_20130630.ListLocalDisks'


class XAmzTarget58(Enum):
    StorageGateway_20130630_ListTagsForResource = (
        'StorageGateway_20130630.ListTagsForResource'
    )


class XAmzTarget59(Enum):
    StorageGateway_20130630_ListTapePools = 'StorageGateway_20130630.ListTapePools'


class XAmzTarget60(Enum):
    StorageGateway_20130630_ListTapes = 'StorageGateway_20130630.ListTapes'


class XAmzTarget61(Enum):
    StorageGateway_20130630_ListVolumeInitiators = (
        'StorageGateway_20130630.ListVolumeInitiators'
    )


class XAmzTarget62(Enum):
    StorageGateway_20130630_ListVolumeRecoveryPoints = (
        'StorageGateway_20130630.ListVolumeRecoveryPoints'
    )


class XAmzTarget63(Enum):
    StorageGateway_20130630_ListVolumes = 'StorageGateway_20130630.ListVolumes'


class XAmzTarget64(Enum):
    StorageGateway_20130630_NotifyWhenUploaded = (
        'StorageGateway_20130630.NotifyWhenUploaded'
    )


class XAmzTarget65(Enum):
    StorageGateway_20130630_RefreshCache = 'StorageGateway_20130630.RefreshCache'


class XAmzTarget66(Enum):
    StorageGateway_20130630_RemoveTagsFromResource = (
        'StorageGateway_20130630.RemoveTagsFromResource'
    )


class XAmzTarget67(Enum):
    StorageGateway_20130630_ResetCache = 'StorageGateway_20130630.ResetCache'


class XAmzTarget68(Enum):
    StorageGateway_20130630_RetrieveTapeArchive = (
        'StorageGateway_20130630.RetrieveTapeArchive'
    )


class XAmzTarget69(Enum):
    StorageGateway_20130630_RetrieveTapeRecoveryPoint = (
        'StorageGateway_20130630.RetrieveTapeRecoveryPoint'
    )


class XAmzTarget70(Enum):
    StorageGateway_20130630_SetLocalConsolePassword = (
        'StorageGateway_20130630.SetLocalConsolePassword'
    )


class XAmzTarget71(Enum):
    StorageGateway_20130630_SetSMBGuestPassword = (
        'StorageGateway_20130630.SetSMBGuestPassword'
    )


class XAmzTarget72(Enum):
    StorageGateway_20130630_ShutdownGateway = 'StorageGateway_20130630.ShutdownGateway'


class XAmzTarget73(Enum):
    StorageGateway_20130630_StartAvailabilityMonitorTest = (
        'StorageGateway_20130630.StartAvailabilityMonitorTest'
    )


class XAmzTarget74(Enum):
    StorageGateway_20130630_StartGateway = 'StorageGateway_20130630.StartGateway'


class XAmzTarget75(Enum):
    StorageGateway_20130630_UpdateAutomaticTapeCreationPolicy = (
        'StorageGateway_20130630.UpdateAutomaticTapeCreationPolicy'
    )


class XAmzTarget76(Enum):
    StorageGateway_20130630_UpdateBandwidthRateLimit = (
        'StorageGateway_20130630.UpdateBandwidthRateLimit'
    )


class XAmzTarget77(Enum):
    StorageGateway_20130630_UpdateBandwidthRateLimitSchedule = (
        'StorageGateway_20130630.UpdateBandwidthRateLimitSchedule'
    )


class XAmzTarget78(Enum):
    StorageGateway_20130630_UpdateChapCredentials = (
        'StorageGateway_20130630.UpdateChapCredentials'
    )


class XAmzTarget79(Enum):
    StorageGateway_20130630_UpdateFileSystemAssociation = (
        'StorageGateway_20130630.UpdateFileSystemAssociation'
    )


class XAmzTarget80(Enum):
    StorageGateway_20130630_UpdateGatewayInformation = (
        'StorageGateway_20130630.UpdateGatewayInformation'
    )


class XAmzTarget81(Enum):
    StorageGateway_20130630_UpdateGatewaySoftwareNow = (
        'StorageGateway_20130630.UpdateGatewaySoftwareNow'
    )


class XAmzTarget82(Enum):
    StorageGateway_20130630_UpdateMaintenanceStartTime = (
        'StorageGateway_20130630.UpdateMaintenanceStartTime'
    )


class XAmzTarget83(Enum):
    StorageGateway_20130630_UpdateNFSFileShare = (
        'StorageGateway_20130630.UpdateNFSFileShare'
    )


class XAmzTarget84(Enum):
    StorageGateway_20130630_UpdateSMBFileShare = (
        'StorageGateway_20130630.UpdateSMBFileShare'
    )


class XAmzTarget85(Enum):
    StorageGateway_20130630_UpdateSMBFileShareVisibility = (
        'StorageGateway_20130630.UpdateSMBFileShareVisibility'
    )


class XAmzTarget86(Enum):
    StorageGateway_20130630_UpdateSMBLocalGroups = (
        'StorageGateway_20130630.UpdateSMBLocalGroups'
    )


class XAmzTarget87(Enum):
    StorageGateway_20130630_UpdateSMBSecurityStrategy = (
        'StorageGateway_20130630.UpdateSMBSecurityStrategy'
    )


class XAmzTarget88(Enum):
    StorageGateway_20130630_UpdateSnapshotSchedule = (
        'StorageGateway_20130630.UpdateSnapshotSchedule'
    )


class XAmzTarget89(Enum):
    StorageGateway_20130630_UpdateVTLDeviceType = (
        'StorageGateway_20130630.UpdateVTLDeviceType'
    )


class ActivateGatewayOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class AddCacheInput(BaseModel):
    DiskIds_1: DiskIds = Field(..., alias='DiskIds')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class AddCacheOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class AddTagsToResourceOutput(BaseModel):
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')


class AddUploadBufferInput(BaseModel):
    DiskIds_1: DiskIds = Field(..., alias='DiskIds')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class AddUploadBufferOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class AddWorkingStorageInput(BaseModel):
    DiskIds_1: DiskIds = Field(..., alias='DiskIds')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class AddWorkingStorageOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class AssignTapePoolInput(BaseModel):
    BypassGovernanceRetention: Optional[Boolean] = None
    PoolId_1: PoolId = Field(..., alias='PoolId')
    TapeARN_1: TapeARN = Field(..., alias='TapeARN')


class AssignTapePoolOutput(BaseModel):
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')


class AssociateFileSystemOutput(BaseModel):
    FileSystemAssociationARN_1: Optional[FileSystemAssociationARN] = Field(
        None, alias='FileSystemAssociationARN'
    )


class AttachVolumeInput(BaseModel):
    DiskId_1: Optional[DiskId] = Field(None, alias='DiskId')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')
    TargetName_1: Optional[TargetName] = Field(None, alias='TargetName')
    VolumeARN_1: VolumeARN = Field(..., alias='VolumeARN')


class AttachVolumeOutput(BaseModel):
    TargetARN_1: Optional[TargetARN] = Field(None, alias='TargetARN')
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')


class AutomaticTapeCreationRule(BaseModel):
    MinimumNumTapes_1: MinimumNumTapes = Field(..., alias='MinimumNumTapes')
    PoolId_1: PoolId = Field(..., alias='PoolId')
    TapeBarcodePrefix_1: TapeBarcodePrefix = Field(..., alias='TapeBarcodePrefix')
    TapeSizeInBytes: TapeSize
    Worm: Optional[Boolean] = None


class AutomaticTapeCreationRules(RootModel[List[AutomaticTapeCreationRule]]):
    root: List[AutomaticTapeCreationRule] = Field(..., max_length=10, min_length=1)


class BandwidthRateLimitInterval(BaseModel):
    AverageDownloadRateLimitInBitsPerSec: Optional[BandwidthDownloadRateLimit] = None
    AverageUploadRateLimitInBitsPerSec: Optional[BandwidthUploadRateLimit] = None
    DaysOfWeek_1: DaysOfWeek = Field(..., alias='DaysOfWeek')
    EndHourOfDay: HourOfDay
    EndMinuteOfHour: MinuteOfHour
    StartHourOfDay: HourOfDay
    StartMinuteOfHour: MinuteOfHour


class BandwidthRateLimitIntervals(RootModel[List[BandwidthRateLimitInterval]]):
    root: List[BandwidthRateLimitInterval] = Field(..., max_length=20, min_length=0)


class CacheAttributes(BaseModel):
    CacheStaleTimeoutInSeconds_1: Optional[CacheStaleTimeoutInSeconds] = Field(
        None, alias='CacheStaleTimeoutInSeconds'
    )


class CancelArchivalInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    TapeARN_1: TapeARN = Field(..., alias='TapeARN')


class CancelArchivalOutput(BaseModel):
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')


class CancelRetrievalInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    TapeARN_1: TapeARN = Field(..., alias='TapeARN')


class CancelRetrievalOutput(BaseModel):
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')


class ChapInfo(BaseModel):
    InitiatorName: Optional[IqnName] = None
    SecretToAuthenticateInitiator: Optional[ChapSecret] = None
    SecretToAuthenticateTarget: Optional[ChapSecret] = None
    TargetARN_1: Optional[TargetARN] = Field(None, alias='TargetARN')


class CreateCachediSCSIVolumeOutput(BaseModel):
    TargetARN_1: Optional[TargetARN] = Field(None, alias='TargetARN')
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')


class CreateNFSFileShareOutput(BaseModel):
    FileShareARN_1: Optional[FileShareARN] = Field(None, alias='FileShareARN')


class CreateSMBFileShareOutput(BaseModel):
    FileShareARN_1: Optional[FileShareARN] = Field(None, alias='FileShareARN')


class CreateSnapshotFromVolumeRecoveryPointOutput(BaseModel):
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')
    VolumeRecoveryPointTime: Optional[String] = None


class CreateSnapshotOutput(BaseModel):
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')


class CreateStorediSCSIVolumeOutput(BaseModel):
    TargetARN_1: Optional[TargetARN] = Field(None, alias='TargetARN')
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')
    VolumeSizeInBytes: Optional[Long] = None


class CreateTapePoolOutput(BaseModel):
    PoolARN_1: Optional[PoolARN] = Field(None, alias='PoolARN')


class CreateTapeWithBarcodeOutput(BaseModel):
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')


class CreateTapesOutput(BaseModel):
    TapeARNs_1: Optional[TapeARNs] = Field(None, alias='TapeARNs')


class DeleteAutomaticTapeCreationPolicyInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DeleteAutomaticTapeCreationPolicyOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class DeleteBandwidthRateLimitInput(BaseModel):
    BandwidthType_1: BandwidthType = Field(..., alias='BandwidthType')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DeleteBandwidthRateLimitOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class DeleteChapCredentialsInput(BaseModel):
    InitiatorName: IqnName
    TargetARN_1: TargetARN = Field(..., alias='TargetARN')


class DeleteChapCredentialsOutput(BaseModel):
    InitiatorName: Optional[IqnName] = None
    TargetARN_1: Optional[TargetARN] = Field(None, alias='TargetARN')


class DeleteFileShareInput(BaseModel):
    FileShareARN_1: FileShareARN = Field(..., alias='FileShareARN')
    ForceDelete: Optional[Boolean] = None


class DeleteFileShareOutput(BaseModel):
    FileShareARN_1: Optional[FileShareARN] = Field(None, alias='FileShareARN')


class DeleteGatewayInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DeleteGatewayOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class DeleteSnapshotScheduleInput(BaseModel):
    VolumeARN_1: VolumeARN = Field(..., alias='VolumeARN')


class DeleteSnapshotScheduleOutput(BaseModel):
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')


class DeleteTapeArchiveInput(BaseModel):
    BypassGovernanceRetention: Optional[Boolean] = None
    TapeARN_1: TapeARN = Field(..., alias='TapeARN')


class DeleteTapeArchiveOutput(BaseModel):
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')


class DeleteTapeInput(BaseModel):
    BypassGovernanceRetention: Optional[Boolean] = None
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    TapeARN_1: TapeARN = Field(..., alias='TapeARN')


class DeleteTapeOutput(BaseModel):
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')


class DeleteTapePoolInput(BaseModel):
    PoolARN_1: PoolARN = Field(..., alias='PoolARN')


class DeleteTapePoolOutput(BaseModel):
    PoolARN_1: Optional[PoolARN] = Field(None, alias='PoolARN')


class DeleteVolumeInput(BaseModel):
    VolumeARN_1: VolumeARN = Field(..., alias='VolumeARN')


class DeleteVolumeOutput(BaseModel):
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')


class DescribeAvailabilityMonitorTestInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DescribeAvailabilityMonitorTestOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    StartTime: Optional[Time] = None
    Status: Optional[AvailabilityMonitorTestStatus] = None


class DescribeBandwidthRateLimitInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DescribeBandwidthRateLimitOutput(BaseModel):
    AverageDownloadRateLimitInBitsPerSec: Optional[BandwidthDownloadRateLimit] = None
    AverageUploadRateLimitInBitsPerSec: Optional[BandwidthUploadRateLimit] = None
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class DescribeBandwidthRateLimitScheduleInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DescribeBandwidthRateLimitScheduleOutput(BaseModel):
    BandwidthRateLimitIntervals_1: Optional[BandwidthRateLimitIntervals] = Field(
        None, alias='BandwidthRateLimitIntervals'
    )
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class DescribeCacheInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DescribeCacheOutput(BaseModel):
    CacheAllocatedInBytes: Optional[Long] = None
    CacheDirtyPercentage: Optional[Double] = None
    CacheHitPercentage: Optional[Double] = None
    CacheMissPercentage: Optional[Double] = None
    CacheUsedPercentage: Optional[Double] = None
    DiskIds_1: Optional[DiskIds] = Field(None, alias='DiskIds')
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class DescribeCachediSCSIVolumesInput(BaseModel):
    VolumeARNs_1: VolumeARNs = Field(..., alias='VolumeARNs')


class DescribeChapCredentialsInput(BaseModel):
    TargetARN_1: TargetARN = Field(..., alias='TargetARN')


class DescribeFileSystemAssociationsInput(BaseModel):
    FileSystemAssociationARNList_1: FileSystemAssociationARNList = Field(
        ..., alias='FileSystemAssociationARNList'
    )


class DescribeGatewayInformationInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DescribeMaintenanceStartTimeInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DescribeMaintenanceStartTimeOutput(BaseModel):
    DayOfMonth_1: Optional[DayOfMonth] = Field(None, alias='DayOfMonth')
    DayOfWeek_1: Optional[DayOfWeek] = Field(None, alias='DayOfWeek')
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    HourOfDay_1: Optional[HourOfDay] = Field(None, alias='HourOfDay')
    MinuteOfHour_1: Optional[MinuteOfHour] = Field(None, alias='MinuteOfHour')
    Timezone: Optional[GatewayTimezone] = None


class DescribeNFSFileSharesInput(BaseModel):
    FileShareARNList_1: FileShareARNList = Field(..., alias='FileShareARNList')


class DescribeSMBFileSharesInput(BaseModel):
    FileShareARNList_1: FileShareARNList = Field(..., alias='FileShareARNList')


class DescribeSMBSettingsInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DescribeSnapshotScheduleInput(BaseModel):
    VolumeARN_1: VolumeARN = Field(..., alias='VolumeARN')


class DescribeStorediSCSIVolumesInput(BaseModel):
    VolumeARNs_1: VolumeARNs = Field(..., alias='VolumeARNs')


class DescribeTapeArchivesInput(BaseModel):
    Limit: Optional[PositiveIntObject] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    TapeARNs_1: Optional[TapeARNs] = Field(None, alias='TapeARNs')


class DescribeTapeRecoveryPointsInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    Limit: Optional[PositiveIntObject] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')


class DescribeTapesInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    Limit: Optional[PositiveIntObject] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    TapeARNs_1: Optional[TapeARNs] = Field(None, alias='TapeARNs')


class DescribeUploadBufferInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DescribeUploadBufferOutput(BaseModel):
    DiskIds_1: Optional[DiskIds] = Field(None, alias='DiskIds')
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    UploadBufferAllocatedInBytes: Optional[Long] = None
    UploadBufferUsedInBytes: Optional[Long] = None


class DescribeVTLDevicesInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    Limit: Optional[PositiveIntObject] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    VTLDeviceARNs_1: Optional[VTLDeviceARNs] = Field(None, alias='VTLDeviceARNs')


class DescribeWorkingStorageInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DescribeWorkingStorageOutput(BaseModel):
    DiskIds_1: Optional[DiskIds] = Field(None, alias='DiskIds')
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    WorkingStorageAllocatedInBytes: Optional[Long] = None
    WorkingStorageUsedInBytes: Optional[Long] = None


class DetachVolumeInput(BaseModel):
    ForceDetach: Optional[Boolean] = None
    VolumeARN_1: VolumeARN = Field(..., alias='VolumeARN')


class DetachVolumeOutput(BaseModel):
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')


class DeviceiSCSIAttributes(BaseModel):
    ChapEnabled: Optional[Boolean] = None
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    NetworkInterfacePort: Optional[Integer] = None
    TargetARN_1: Optional[TargetARN] = Field(None, alias='TargetARN')


class DisableGatewayInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class DisableGatewayOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class DisassociateFileSystemInput(BaseModel):
    FileSystemAssociationARN_1: FileSystemAssociationARN = Field(
        ..., alias='FileSystemAssociationARN'
    )
    ForceDelete: Optional[Boolean] = None


class DisassociateFileSystemOutput(BaseModel):
    FileSystemAssociationARN_1: Optional[FileSystemAssociationARN] = Field(
        None, alias='FileSystemAssociationARN'
    )


class Disk(BaseModel):
    DiskAllocationResource: Optional[String] = None
    DiskAllocationType_1: Optional[DiskAllocationType] = Field(
        None, alias='DiskAllocationType'
    )
    DiskAttributeList_1: Optional[DiskAttributeList] = Field(
        None, alias='DiskAttributeList'
    )
    DiskId_1: Optional[DiskId] = Field(None, alias='DiskId')
    DiskNode: Optional[String] = None
    DiskPath: Optional[String] = None
    DiskSizeInBytes: Optional[Long] = None
    DiskStatus: Optional[String] = None


class Disks(RootModel[List[Disk]]):
    root: List[Disk]


class EndpointNetworkConfiguration(BaseModel):
    IpAddresses: Optional[IpAddressList] = None


class FileShareClientList(RootModel[List[IPV4AddressCIDR]]):
    root: List[IPV4AddressCIDR] = Field(
        ...,
        description='The list of clients that are allowed to access the S3 File Gateway. The list must contain either valid IP addresses or valid CIDR blocks.',
        max_length=100,
        min_length=1,
    )


class FileShareInfo(BaseModel):
    FileShareARN_1: Optional[FileShareARN] = Field(None, alias='FileShareARN')
    FileShareId_1: Optional[FileShareId] = Field(None, alias='FileShareId')
    FileShareStatus_1: Optional[FileShareStatus] = Field(None, alias='FileShareStatus')
    FileShareType_1: Optional[FileShareType] = Field(None, alias='FileShareType')
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class FileShareInfoList(RootModel[List[FileShareInfo]]):
    root: List[FileShareInfo]


class FileSystemAssociationStatusDetail(BaseModel):
    ErrorCode: Optional[FileSystemAssociationSyncErrorCode] = None


class FileSystemAssociationStatusDetails(
    RootModel[List[FileSystemAssociationStatusDetail]]
):
    root: List[FileSystemAssociationStatusDetail]


class FileSystemAssociationSummary(BaseModel):
    FileSystemAssociationARN_1: Optional[FileSystemAssociationARN] = Field(
        None, alias='FileSystemAssociationARN'
    )
    FileSystemAssociationId_1: Optional[FileSystemAssociationId] = Field(
        None, alias='FileSystemAssociationId'
    )
    FileSystemAssociationStatus_1: Optional[FileSystemAssociationStatus] = Field(
        None, alias='FileSystemAssociationStatus'
    )
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class FileSystemAssociationSummaryList(RootModel[List[FileSystemAssociationSummary]]):
    root: List[FileSystemAssociationSummary]


class GatewayInfo(BaseModel):
    Ec2InstanceId_1: Optional[Ec2InstanceId] = Field(None, alias='Ec2InstanceId')
    Ec2InstanceRegion_1: Optional[Ec2InstanceRegion] = Field(
        None, alias='Ec2InstanceRegion'
    )
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    GatewayId_1: Optional[GatewayId] = Field(None, alias='GatewayId')
    GatewayName: Optional[String] = None
    GatewayOperationalState_1: Optional[GatewayOperationalState] = Field(
        None, alias='GatewayOperationalState'
    )
    GatewayType_1: Optional[GatewayType] = Field(None, alias='GatewayType')
    HostEnvironment_1: Optional[HostEnvironment] = Field(None, alias='HostEnvironment')
    HostEnvironmentId_1: Optional[HostEnvironmentId] = Field(
        None, alias='HostEnvironmentId'
    )


class Gateways(RootModel[List[GatewayInfo]]):
    root: List[GatewayInfo]


class JoinDomainInput(BaseModel):
    DomainControllers: Optional[Hosts] = None
    DomainName_1: DomainName = Field(..., alias='DomainName')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    OrganizationalUnit_1: Optional[OrganizationalUnit] = Field(
        None, alias='OrganizationalUnit'
    )
    Password: DomainUserPassword
    TimeoutInSeconds_1: Optional[TimeoutInSeconds] = Field(
        None, alias='TimeoutInSeconds'
    )
    UserName: DomainUserName


class ListFileSharesInput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    Limit: Optional[PositiveIntObject] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')


class ListFileSharesOutput(BaseModel):
    FileShareInfoList_1: Optional[FileShareInfoList] = Field(
        None, alias='FileShareInfoList'
    )
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    NextMarker: Optional[Marker] = None


class ListFileSystemAssociationsInput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    Limit: Optional[PositiveIntObject] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')


class ListFileSystemAssociationsOutput(BaseModel):
    FileSystemAssociationSummaryList_1: Optional[FileSystemAssociationSummaryList] = (
        Field(None, alias='FileSystemAssociationSummaryList')
    )
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    NextMarker: Optional[Marker] = None


class ListGatewaysInput(BaseModel):
    Limit: Optional[PositiveIntObject] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')


class ListGatewaysOutput(BaseModel):
    Gateways_1: Optional[Gateways] = Field(None, alias='Gateways')
    Marker_1: Optional[Marker] = Field(None, alias='Marker')


class ListLocalDisksOutput(BaseModel):
    Disks_1: Optional[Disks] = Field(None, alias='Disks')
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class ListTagsForResourceInput(BaseModel):
    Limit: Optional[PositiveIntObject] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')


class ListTapePoolsInput(BaseModel):
    Limit: Optional[PositiveIntObject] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    PoolARNs_1: Optional[PoolARNs] = Field(None, alias='PoolARNs')


class ListTapesInput(BaseModel):
    Limit: Optional[PositiveIntObject] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    TapeARNs_1: Optional[TapeARNs] = Field(None, alias='TapeARNs')


class ListVolumeInitiatorsInput(BaseModel):
    VolumeARN_1: VolumeARN = Field(..., alias='VolumeARN')


class ListVolumesInput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    Limit: Optional[PositiveIntObject] = None
    Marker_1: Optional[Marker] = Field(None, alias='Marker')


class NFSFileShareDefaults(BaseModel):
    DirectoryMode: Optional[PermissionMode] = None
    FileMode: Optional[PermissionMode] = None
    GroupId: Optional[PermissionId] = None
    OwnerId: Optional[PermissionId] = None


class NetworkInterface(BaseModel):
    Ipv4Address: Optional[String] = None
    Ipv6Address: Optional[String] = None
    MacAddress: Optional[String] = None


class PoolInfo(BaseModel):
    PoolARN_1: Optional[PoolARN] = Field(None, alias='PoolARN')
    PoolName_1: Optional[PoolName] = Field(None, alias='PoolName')
    PoolStatus_1: Optional[PoolStatus] = Field(None, alias='PoolStatus')
    RetentionLockTimeInDays_1: Optional[RetentionLockTimeInDays] = Field(
        None, alias='RetentionLockTimeInDays'
    )
    RetentionLockType_1: Optional[RetentionLockType] = Field(
        None, alias='RetentionLockType'
    )
    StorageClass: Optional[TapeStorageClass] = None


class PoolInfos(RootModel[List[PoolInfo]]):
    root: List[PoolInfo]


class RemoveTagsFromResourceInput(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')
    TagKeys_1: TagKeys = Field(..., alias='TagKeys')


class RemoveTagsFromResourceOutput(BaseModel):
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')


class RetrieveTapeArchiveInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    TapeARN_1: TapeARN = Field(..., alias='TapeARN')


class RetrieveTapeArchiveOutput(BaseModel):
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')


class RetrieveTapeRecoveryPointInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    TapeARN_1: TapeARN = Field(..., alias='TapeARN')


class RetrieveTapeRecoveryPointOutput(BaseModel):
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class Tape(BaseModel):
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    PoolEntryDate: Optional[Time] = None
    PoolId_1: Optional[PoolId] = Field(None, alias='PoolId')
    Progress: Optional[DoubleObject] = None
    RetentionStartDate: Optional[Time] = None
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')
    TapeBarcode_1: Optional[TapeBarcode] = Field(None, alias='TapeBarcode')
    TapeCreatedDate: Optional[Time] = None
    TapeSizeInBytes: Optional[TapeSize] = None
    TapeStatus_1: Optional[TapeStatus] = Field(None, alias='TapeStatus')
    TapeUsedInBytes: Optional[TapeUsage] = None
    VTLDevice: Optional[VTLDeviceARN] = None
    Worm: Optional[Boolean] = None


class TapeArchive(BaseModel):
    CompletionTime: Optional[Time] = None
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    PoolEntryDate: Optional[Time] = None
    PoolId_1: Optional[PoolId] = Field(None, alias='PoolId')
    RetentionStartDate: Optional[Time] = None
    RetrievedTo: Optional[GatewayARN] = None
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')
    TapeBarcode_1: Optional[TapeBarcode] = Field(None, alias='TapeBarcode')
    TapeCreatedDate: Optional[Time] = None
    TapeSizeInBytes: Optional[TapeSize] = None
    TapeStatus: Optional[TapeArchiveStatus] = None
    TapeUsedInBytes: Optional[TapeUsage] = None
    Worm: Optional[Boolean] = None


class TapeArchives(RootModel[List[TapeArchive]]):
    root: List[TapeArchive]


class TapeInfo(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    PoolEntryDate: Optional[Time] = None
    PoolId_1: Optional[PoolId] = Field(None, alias='PoolId')
    RetentionStartDate: Optional[Time] = None
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')
    TapeBarcode_1: Optional[TapeBarcode] = Field(None, alias='TapeBarcode')
    TapeSizeInBytes: Optional[TapeSize] = None
    TapeStatus_1: Optional[TapeStatus] = Field(None, alias='TapeStatus')


class TapeInfos(RootModel[List[TapeInfo]]):
    root: List[TapeInfo] = Field(
        ...,
        description='An array of <a>TapeInfo</a> objects, where each object describes a single tape. If there are no tapes in the tape library or VTS, then the <code>TapeInfos</code> is an empty array.',
    )


class TapeRecoveryPointInfo(BaseModel):
    TapeARN_1: Optional[TapeARN] = Field(None, alias='TapeARN')
    TapeRecoveryPointTime: Optional[Time] = None
    TapeSizeInBytes: Optional[TapeSize] = None
    TapeStatus: Optional[TapeRecoveryPointStatus] = None


class TapeRecoveryPointInfos(RootModel[List[TapeRecoveryPointInfo]]):
    root: List[TapeRecoveryPointInfo]


class Tapes(RootModel[List[Tape]]):
    root: List[Tape]


class UpdateAutomaticTapeCreationPolicyInput(BaseModel):
    AutomaticTapeCreationRules_1: AutomaticTapeCreationRules = Field(
        ..., alias='AutomaticTapeCreationRules'
    )
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class UpdateBandwidthRateLimitScheduleInput(BaseModel):
    BandwidthRateLimitIntervals_1: BandwidthRateLimitIntervals = Field(
        ..., alias='BandwidthRateLimitIntervals'
    )
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')


class UpdateFileSystemAssociationInput(BaseModel):
    AuditDestinationARN_1: Optional[AuditDestinationARN] = Field(
        None, alias='AuditDestinationARN'
    )
    CacheAttributes_1: Optional[CacheAttributes] = Field(None, alias='CacheAttributes')
    FileSystemAssociationARN_1: FileSystemAssociationARN = Field(
        ..., alias='FileSystemAssociationARN'
    )
    Password: Optional[DomainUserPassword] = None
    UserName: Optional[DomainUserName] = None


class UpdateGatewayInformationOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    GatewayName: Optional[String] = None


class UpdateNFSFileShareInput(BaseModel):
    AuditDestinationARN_1: Optional[AuditDestinationARN] = Field(
        None, alias='AuditDestinationARN'
    )
    CacheAttributes_1: Optional[CacheAttributes] = Field(None, alias='CacheAttributes')
    ClientList: Optional[FileShareClientList] = None
    DefaultStorageClass: Optional[StorageClass] = None
    FileShareARN_1: FileShareARN = Field(..., alias='FileShareARN')
    FileShareName_1: Optional[FileShareName] = Field(None, alias='FileShareName')
    GuessMIMETypeEnabled: Optional[Boolean] = None
    KMSEncrypted: Optional[Boolean] = None
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    NFSFileShareDefaults_1: Optional[NFSFileShareDefaults] = Field(
        None, alias='NFSFileShareDefaults'
    )
    NotificationPolicy_1: Optional[NotificationPolicy] = Field(
        None, alias='NotificationPolicy'
    )
    ObjectACL_1: Optional[ObjectACL] = Field(None, alias='ObjectACL')
    ReadOnly: Optional[Boolean] = None
    RequesterPays: Optional[Boolean] = None
    Squash_1: Optional[Squash] = Field(None, alias='Squash')


class UpdateSnapshotScheduleInput(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    RecurrenceInHours_1: RecurrenceInHours = Field(..., alias='RecurrenceInHours')
    StartAt: HourOfDay
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VolumeARN_1: VolumeARN = Field(..., alias='VolumeARN')


class UpdateSnapshotScheduleOutput(BaseModel):
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')


class UpdateVTLDeviceTypeInput(BaseModel):
    DeviceType_1: DeviceType = Field(..., alias='DeviceType')
    VTLDeviceARN_1: VTLDeviceARN = Field(..., alias='VTLDeviceARN')


class UpdateVTLDeviceTypeOutput(BaseModel):
    VTLDeviceARN_1: Optional[VTLDeviceARN] = Field(None, alias='VTLDeviceARN')


class UserList(RootModel[List[UserListUser]]):
    root: List[UserListUser] = Field(..., max_length=100, min_length=0)


class VTLDevice(BaseModel):
    DeviceiSCSIAttributes_1: Optional[DeviceiSCSIAttributes] = Field(
        None, alias='DeviceiSCSIAttributes'
    )
    VTLDeviceARN_1: Optional[VTLDeviceARN] = Field(None, alias='VTLDeviceARN')
    VTLDeviceProductIdentifier_1: Optional[VTLDeviceProductIdentifier] = Field(
        None, alias='VTLDeviceProductIdentifier'
    )
    VTLDeviceType_1: Optional[VTLDeviceType] = Field(None, alias='VTLDeviceType')
    VTLDeviceVendor_1: Optional[VTLDeviceVendor] = Field(None, alias='VTLDeviceVendor')


class VTLDevices(RootModel[List[VTLDevice]]):
    root: List[VTLDevice]


class VolumeInfo(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    GatewayId_1: Optional[GatewayId] = Field(None, alias='GatewayId')
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')
    VolumeAttachmentStatus_1: Optional[VolumeAttachmentStatus] = Field(
        None, alias='VolumeAttachmentStatus'
    )
    VolumeId_1: Optional[VolumeId] = Field(None, alias='VolumeId')
    VolumeSizeInBytes: Optional[Long] = None
    VolumeType_1: Optional[VolumeType] = Field(None, alias='VolumeType')


class VolumeInfos(RootModel[List[VolumeInfo]]):
    root: List[VolumeInfo]


class VolumeRecoveryPointInfo(BaseModel):
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')
    VolumeRecoveryPointTime: Optional[String] = None
    VolumeSizeInBytes: Optional[Long] = None
    VolumeUsageInBytes: Optional[Long] = None


class VolumeRecoveryPointInfos(RootModel[List[VolumeRecoveryPointInfo]]):
    root: List[VolumeRecoveryPointInfo]


class VolumeiSCSIAttributes(BaseModel):
    ChapEnabled: Optional[Boolean] = None
    LunNumber: Optional[PositiveIntObject] = None
    NetworkInterfaceId_1: Optional[NetworkInterfaceId] = Field(
        None, alias='NetworkInterfaceId'
    )
    NetworkInterfacePort: Optional[Integer] = None
    TargetARN_1: Optional[TargetARN] = Field(None, alias='TargetARN')


class ActivateGatewayInput(BaseModel):
    ActivationKey_1: ActivationKey = Field(..., alias='ActivationKey')
    GatewayName_1: GatewayName = Field(..., alias='GatewayName')
    GatewayRegion: RegionId
    GatewayTimezone_1: GatewayTimezone = Field(..., alias='GatewayTimezone')
    GatewayType_1: Optional[GatewayType] = Field(None, alias='GatewayType')
    MediumChangerType_1: Optional[MediumChangerType] = Field(
        None, alias='MediumChangerType'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TapeDriveType_1: Optional[TapeDriveType] = Field(None, alias='TapeDriveType')


class AddTagsToResourceInput(BaseModel):
    ResourceARN_1: ResourceARN = Field(..., alias='ResourceARN')
    Tags_1: Tags = Field(..., alias='Tags')


class AssociateFileSystemInput(BaseModel):
    AuditDestinationARN_1: Optional[AuditDestinationARN] = Field(
        None, alias='AuditDestinationARN'
    )
    CacheAttributes_1: Optional[CacheAttributes] = Field(None, alias='CacheAttributes')
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    EndpointNetworkConfiguration_1: Optional[EndpointNetworkConfiguration] = Field(
        None, alias='EndpointNetworkConfiguration'
    )
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    LocationARN: FileSystemLocationARN
    Password: DomainUserPassword
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    UserName: DomainUserName


class AutomaticTapeCreationPolicyInfo(BaseModel):
    AutomaticTapeCreationRules_1: Optional[AutomaticTapeCreationRules] = Field(
        None, alias='AutomaticTapeCreationRules'
    )
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')


class AutomaticTapeCreationPolicyInfos(
    RootModel[List[AutomaticTapeCreationPolicyInfo]]
):
    root: List[AutomaticTapeCreationPolicyInfo]


class CachediSCSIVolume(BaseModel):
    CreatedDate_1: Optional[CreatedDate] = Field(None, alias='CreatedDate')
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    SourceSnapshotId: Optional[SnapshotId] = None
    TargetName_1: Optional[TargetName] = Field(None, alias='TargetName')
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')
    VolumeAttachmentStatus_1: Optional[VolumeAttachmentStatus] = Field(
        None, alias='VolumeAttachmentStatus'
    )
    VolumeId_1: Optional[VolumeId] = Field(None, alias='VolumeId')
    VolumeProgress: Optional[DoubleObject] = None
    VolumeSizeInBytes: Optional[Long] = None
    VolumeStatus_1: Optional[VolumeStatus] = Field(None, alias='VolumeStatus')
    VolumeType_1: Optional[VolumeType] = Field(None, alias='VolumeType')
    VolumeUsedInBytes_1: Optional[VolumeUsedInBytes] = Field(
        None, alias='VolumeUsedInBytes'
    )
    VolumeiSCSIAttributes_1: Optional[VolumeiSCSIAttributes] = Field(
        None, alias='VolumeiSCSIAttributes'
    )


class CachediSCSIVolumes(RootModel[List[CachediSCSIVolume]]):
    root: List[CachediSCSIVolume]


class ChapCredentials(RootModel[List[ChapInfo]]):
    root: List[ChapInfo]


class CreateCachediSCSIVolumeInput(BaseModel):
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    KMSEncrypted: Optional[Boolean] = None
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    SourceVolumeARN: Optional[VolumeARN] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TargetName_1: TargetName = Field(..., alias='TargetName')
    VolumeSizeInBytes: Long


class CreateNFSFileShareInput(BaseModel):
    AuditDestinationARN_1: Optional[AuditDestinationARN] = Field(
        None, alias='AuditDestinationARN'
    )
    BucketRegion: Optional[RegionId] = None
    CacheAttributes_1: Optional[CacheAttributes] = Field(None, alias='CacheAttributes')
    ClientList: Optional[FileShareClientList] = None
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    DefaultStorageClass: Optional[StorageClass] = None
    FileShareName_1: Optional[FileShareName] = Field(None, alias='FileShareName')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    GuessMIMETypeEnabled: Optional[Boolean] = None
    KMSEncrypted: Optional[Boolean] = None
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    LocationARN_1: LocationARN = Field(..., alias='LocationARN')
    NFSFileShareDefaults_1: Optional[NFSFileShareDefaults] = Field(
        None, alias='NFSFileShareDefaults'
    )
    NotificationPolicy_1: Optional[NotificationPolicy] = Field(
        None, alias='NotificationPolicy'
    )
    ObjectACL_1: Optional[ObjectACL] = Field(None, alias='ObjectACL')
    ReadOnly: Optional[Boolean] = None
    RequesterPays: Optional[Boolean] = None
    Role_1: Role = Field(..., alias='Role')
    Squash_1: Optional[Squash] = Field(None, alias='Squash')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VPCEndpointDNSName: Optional[DNSHostName] = None


class CreateSMBFileShareInput(BaseModel):
    AccessBasedEnumeration: Optional[Boolean] = None
    AdminUserList: Optional[UserList] = None
    AuditDestinationARN_1: Optional[AuditDestinationARN] = Field(
        None, alias='AuditDestinationARN'
    )
    Authentication_1: Optional[Authentication] = Field(None, alias='Authentication')
    BucketRegion: Optional[RegionId] = None
    CacheAttributes_1: Optional[CacheAttributes] = Field(None, alias='CacheAttributes')
    CaseSensitivity_1: Optional[CaseSensitivity] = Field(None, alias='CaseSensitivity')
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    DefaultStorageClass: Optional[StorageClass] = None
    FileShareName_1: Optional[FileShareName] = Field(None, alias='FileShareName')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    GuessMIMETypeEnabled: Optional[Boolean] = None
    InvalidUserList: Optional[UserList] = None
    KMSEncrypted: Optional[Boolean] = None
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    LocationARN_1: LocationARN = Field(..., alias='LocationARN')
    NotificationPolicy_1: Optional[NotificationPolicy] = Field(
        None, alias='NotificationPolicy'
    )
    ObjectACL_1: Optional[ObjectACL] = Field(None, alias='ObjectACL')
    OplocksEnabled: Optional[Boolean] = None
    ReadOnly: Optional[Boolean] = None
    RequesterPays: Optional[Boolean] = None
    Role_1: Role = Field(..., alias='Role')
    SMBACLEnabled: Optional[Boolean] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VPCEndpointDNSName: Optional[DNSHostName] = None
    ValidUserList: Optional[UserList] = None


class CreateSnapshotFromVolumeRecoveryPointInput(BaseModel):
    SnapshotDescription_1: SnapshotDescription = Field(..., alias='SnapshotDescription')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VolumeARN_1: VolumeARN = Field(..., alias='VolumeARN')


class CreateSnapshotInput(BaseModel):
    SnapshotDescription_1: SnapshotDescription = Field(..., alias='SnapshotDescription')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VolumeARN_1: VolumeARN = Field(..., alias='VolumeARN')


class CreateStorediSCSIVolumeInput(BaseModel):
    DiskId_1: DiskId = Field(..., alias='DiskId')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    KMSEncrypted: Optional[Boolean] = None
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    NetworkInterfaceId_1: NetworkInterfaceId = Field(..., alias='NetworkInterfaceId')
    PreserveExistingData: Boolean
    SnapshotId_1: Optional[SnapshotId] = Field(None, alias='SnapshotId')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TargetName_1: TargetName = Field(..., alias='TargetName')


class CreateTapePoolInput(BaseModel):
    PoolName_1: PoolName = Field(..., alias='PoolName')
    RetentionLockTimeInDays_1: Optional[RetentionLockTimeInDays] = Field(
        None, alias='RetentionLockTimeInDays'
    )
    RetentionLockType_1: Optional[RetentionLockType] = Field(
        None, alias='RetentionLockType'
    )
    StorageClass: TapeStorageClass
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateTapeWithBarcodeInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    KMSEncrypted: Optional[Boolean] = None
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    PoolId_1: Optional[PoolId] = Field(None, alias='PoolId')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TapeBarcode_1: TapeBarcode = Field(..., alias='TapeBarcode')
    TapeSizeInBytes: TapeSize
    Worm: Optional[Boolean] = None


class CreateTapesInput(BaseModel):
    ClientToken_1: ClientToken = Field(..., alias='ClientToken')
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    KMSEncrypted: Optional[Boolean] = None
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    NumTapesToCreate_1: NumTapesToCreate = Field(..., alias='NumTapesToCreate')
    PoolId_1: Optional[PoolId] = Field(None, alias='PoolId')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TapeBarcodePrefix_1: TapeBarcodePrefix = Field(..., alias='TapeBarcodePrefix')
    TapeSizeInBytes: TapeSize
    Worm: Optional[Boolean] = None


class DescribeCachediSCSIVolumesOutput(BaseModel):
    CachediSCSIVolumes_1: Optional[CachediSCSIVolumes] = Field(
        None, alias='CachediSCSIVolumes'
    )


class DescribeChapCredentialsOutput(BaseModel):
    ChapCredentials_1: Optional[ChapCredentials] = Field(None, alias='ChapCredentials')


class DescribeSnapshotScheduleOutput(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    RecurrenceInHours_1: Optional[RecurrenceInHours] = Field(
        None, alias='RecurrenceInHours'
    )
    StartAt: Optional[HourOfDay] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Timezone: Optional[GatewayTimezone] = None
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')


class DescribeTapeArchivesOutput(BaseModel):
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    TapeArchives_1: Optional[TapeArchives] = Field(None, alias='TapeArchives')


class DescribeTapeRecoveryPointsOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    TapeRecoveryPointInfos_1: Optional[TapeRecoveryPointInfos] = Field(
        None, alias='TapeRecoveryPointInfos'
    )


class DescribeTapesOutput(BaseModel):
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    Tapes_1: Optional[Tapes] = Field(None, alias='Tapes')


class DescribeVTLDevicesOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    VTLDevices_1: Optional[VTLDevices] = Field(None, alias='VTLDevices')


class FileSystemAssociationInfo(BaseModel):
    AuditDestinationARN_1: Optional[AuditDestinationARN] = Field(
        None, alias='AuditDestinationARN'
    )
    CacheAttributes_1: Optional[CacheAttributes] = Field(None, alias='CacheAttributes')
    EndpointNetworkConfiguration_1: Optional[EndpointNetworkConfiguration] = Field(
        None, alias='EndpointNetworkConfiguration'
    )
    FileSystemAssociationARN_1: Optional[FileSystemAssociationARN] = Field(
        None, alias='FileSystemAssociationARN'
    )
    FileSystemAssociationStatus_1: Optional[FileSystemAssociationStatus] = Field(
        None, alias='FileSystemAssociationStatus'
    )
    FileSystemAssociationStatusDetails_1: Optional[
        FileSystemAssociationStatusDetails
    ] = Field(None, alias='FileSystemAssociationStatusDetails')
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    LocationARN: Optional[FileSystemLocationARN] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class FileSystemAssociationInfoList(RootModel[List[FileSystemAssociationInfo]]):
    root: List[FileSystemAssociationInfo]


class GatewayNetworkInterfaces(RootModel[List[NetworkInterface]]):
    root: List[NetworkInterface]


class ListAutomaticTapeCreationPoliciesOutput(BaseModel):
    AutomaticTapeCreationPolicyInfos_1: Optional[AutomaticTapeCreationPolicyInfos] = (
        Field(None, alias='AutomaticTapeCreationPolicyInfos')
    )


class ListTagsForResourceOutput(BaseModel):
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    ResourceARN_1: Optional[ResourceARN] = Field(None, alias='ResourceARN')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class ListTapePoolsOutput(BaseModel):
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    PoolInfos_1: Optional[PoolInfos] = Field(None, alias='PoolInfos')


class ListTapesOutput(BaseModel):
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    TapeInfos_1: Optional[TapeInfos] = Field(None, alias='TapeInfos')


class ListVolumeRecoveryPointsOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    VolumeRecoveryPointInfos_1: Optional[VolumeRecoveryPointInfos] = Field(
        None, alias='VolumeRecoveryPointInfos'
    )


class ListVolumesOutput(BaseModel):
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    VolumeInfos_1: Optional[VolumeInfos] = Field(None, alias='VolumeInfos')


class NFSFileShareInfo(BaseModel):
    AuditDestinationARN_1: Optional[AuditDestinationARN] = Field(
        None, alias='AuditDestinationARN'
    )
    BucketRegion: Optional[RegionId] = None
    CacheAttributes_1: Optional[CacheAttributes] = Field(None, alias='CacheAttributes')
    ClientList: Optional[FileShareClientList] = None
    DefaultStorageClass: Optional[StorageClass] = None
    FileShareARN_1: Optional[FileShareARN] = Field(None, alias='FileShareARN')
    FileShareId_1: Optional[FileShareId] = Field(None, alias='FileShareId')
    FileShareName_1: Optional[FileShareName] = Field(None, alias='FileShareName')
    FileShareStatus_1: Optional[FileShareStatus] = Field(None, alias='FileShareStatus')
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    GuessMIMETypeEnabled: Optional[Boolean] = None
    KMSEncrypted: Optional[Boolean] = None
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    LocationARN_1: Optional[LocationARN] = Field(None, alias='LocationARN')
    NFSFileShareDefaults_1: Optional[NFSFileShareDefaults] = Field(
        None, alias='NFSFileShareDefaults'
    )
    NotificationPolicy_1: Optional[NotificationPolicy] = Field(
        None, alias='NotificationPolicy'
    )
    ObjectACL_1: Optional[ObjectACL] = Field(None, alias='ObjectACL')
    Path_1: Optional[Path] = Field(None, alias='Path')
    ReadOnly: Optional[Boolean] = None
    RequesterPays: Optional[Boolean] = None
    Role_1: Optional[Role] = Field(None, alias='Role')
    Squash_1: Optional[Squash] = Field(None, alias='Squash')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VPCEndpointDNSName: Optional[DNSHostName] = None


class NFSFileShareInfoList(RootModel[List[NFSFileShareInfo]]):
    root: List[NFSFileShareInfo]


class SMBFileShareInfo(BaseModel):
    AccessBasedEnumeration: Optional[Boolean] = None
    AdminUserList: Optional[UserList] = None
    AuditDestinationARN_1: Optional[AuditDestinationARN] = Field(
        None, alias='AuditDestinationARN'
    )
    Authentication_1: Optional[Authentication] = Field(None, alias='Authentication')
    BucketRegion: Optional[RegionId] = None
    CacheAttributes_1: Optional[CacheAttributes] = Field(None, alias='CacheAttributes')
    CaseSensitivity_1: Optional[CaseSensitivity] = Field(None, alias='CaseSensitivity')
    DefaultStorageClass: Optional[StorageClass] = None
    FileShareARN_1: Optional[FileShareARN] = Field(None, alias='FileShareARN')
    FileShareId_1: Optional[FileShareId] = Field(None, alias='FileShareId')
    FileShareName_1: Optional[FileShareName] = Field(None, alias='FileShareName')
    FileShareStatus_1: Optional[FileShareStatus] = Field(None, alias='FileShareStatus')
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    GuessMIMETypeEnabled: Optional[Boolean] = None
    InvalidUserList: Optional[UserList] = None
    KMSEncrypted: Optional[Boolean] = None
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    LocationARN_1: Optional[LocationARN] = Field(None, alias='LocationARN')
    NotificationPolicy_1: Optional[NotificationPolicy] = Field(
        None, alias='NotificationPolicy'
    )
    ObjectACL_1: Optional[ObjectACL] = Field(None, alias='ObjectACL')
    OplocksEnabled: Optional[Boolean] = None
    Path_1: Optional[Path] = Field(None, alias='Path')
    ReadOnly: Optional[Boolean] = None
    RequesterPays: Optional[Boolean] = None
    Role_1: Optional[Role] = Field(None, alias='Role')
    SMBACLEnabled: Optional[Boolean] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VPCEndpointDNSName: Optional[DNSHostName] = None
    ValidUserList: Optional[UserList] = None


class SMBFileShareInfoList(RootModel[List[SMBFileShareInfo]]):
    root: List[SMBFileShareInfo]


class SMBLocalGroups(BaseModel):
    GatewayAdmins: Optional[UserList] = None


class StorediSCSIVolume(BaseModel):
    CreatedDate_1: Optional[CreatedDate] = Field(None, alias='CreatedDate')
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    PreservedExistingData: Optional[Boolean] = None
    SourceSnapshotId: Optional[SnapshotId] = None
    TargetName_1: Optional[TargetName] = Field(None, alias='TargetName')
    VolumeARN_1: Optional[VolumeARN] = Field(None, alias='VolumeARN')
    VolumeAttachmentStatus_1: Optional[VolumeAttachmentStatus] = Field(
        None, alias='VolumeAttachmentStatus'
    )
    VolumeDiskId: Optional[DiskId] = None
    VolumeId_1: Optional[VolumeId] = Field(None, alias='VolumeId')
    VolumeProgress: Optional[DoubleObject] = None
    VolumeSizeInBytes: Optional[Long] = None
    VolumeStatus_1: Optional[VolumeStatus] = Field(None, alias='VolumeStatus')
    VolumeType_1: Optional[VolumeType] = Field(None, alias='VolumeType')
    VolumeUsedInBytes_1: Optional[VolumeUsedInBytes] = Field(
        None, alias='VolumeUsedInBytes'
    )
    VolumeiSCSIAttributes_1: Optional[VolumeiSCSIAttributes] = Field(
        None, alias='VolumeiSCSIAttributes'
    )


class StorediSCSIVolumes(RootModel[List[StorediSCSIVolume]]):
    root: List[StorediSCSIVolume]


class UpdateSMBFileShareInput(BaseModel):
    AccessBasedEnumeration: Optional[Boolean] = None
    AdminUserList: Optional[UserList] = None
    AuditDestinationARN_1: Optional[AuditDestinationARN] = Field(
        None, alias='AuditDestinationARN'
    )
    CacheAttributes_1: Optional[CacheAttributes] = Field(None, alias='CacheAttributes')
    CaseSensitivity_1: Optional[CaseSensitivity] = Field(None, alias='CaseSensitivity')
    DefaultStorageClass: Optional[StorageClass] = None
    FileShareARN_1: FileShareARN = Field(..., alias='FileShareARN')
    FileShareName_1: Optional[FileShareName] = Field(None, alias='FileShareName')
    GuessMIMETypeEnabled: Optional[Boolean] = None
    InvalidUserList: Optional[UserList] = None
    KMSEncrypted: Optional[Boolean] = None
    KMSKey_1: Optional[KMSKey] = Field(None, alias='KMSKey')
    NotificationPolicy_1: Optional[NotificationPolicy] = Field(
        None, alias='NotificationPolicy'
    )
    ObjectACL_1: Optional[ObjectACL] = Field(None, alias='ObjectACL')
    OplocksEnabled: Optional[Boolean] = None
    ReadOnly: Optional[Boolean] = None
    RequesterPays: Optional[Boolean] = None
    SMBACLEnabled: Optional[Boolean] = None
    ValidUserList: Optional[UserList] = None


class UpdateSMBLocalGroupsInput(BaseModel):
    GatewayARN_1: GatewayARN = Field(..., alias='GatewayARN')
    SMBLocalGroups_1: SMBLocalGroups = Field(..., alias='SMBLocalGroups')


class DescribeFileSystemAssociationsOutput(BaseModel):
    FileSystemAssociationInfoList_1: Optional[FileSystemAssociationInfoList] = Field(
        None, alias='FileSystemAssociationInfoList'
    )


class DescribeGatewayInformationOutput(BaseModel):
    CloudWatchLogGroupARN_1: Optional[CloudWatchLogGroupARN] = Field(
        None, alias='CloudWatchLogGroupARN'
    )
    DeprecationDate_1: Optional[DeprecationDate] = Field(None, alias='DeprecationDate')
    Ec2InstanceId_1: Optional[Ec2InstanceId] = Field(None, alias='Ec2InstanceId')
    Ec2InstanceRegion_1: Optional[Ec2InstanceRegion] = Field(
        None, alias='Ec2InstanceRegion'
    )
    EndpointType_1: Optional[EndpointType] = Field(None, alias='EndpointType')
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    GatewayCapacity_1: Optional[GatewayCapacity] = Field(None, alias='GatewayCapacity')
    GatewayId_1: Optional[GatewayId] = Field(None, alias='GatewayId')
    GatewayName: Optional[String] = None
    GatewayNetworkInterfaces_1: Optional[GatewayNetworkInterfaces] = Field(
        None, alias='GatewayNetworkInterfaces'
    )
    GatewayState_1: Optional[GatewayState] = Field(None, alias='GatewayState')
    GatewayTimezone_1: Optional[GatewayTimezone] = Field(None, alias='GatewayTimezone')
    GatewayType_1: Optional[GatewayType] = Field(None, alias='GatewayType')
    HostEnvironment_1: Optional[HostEnvironment] = Field(None, alias='HostEnvironment')
    HostEnvironmentId_1: Optional[HostEnvironmentId] = Field(
        None, alias='HostEnvironmentId'
    )
    LastSoftwareUpdate_1: Optional[LastSoftwareUpdate] = Field(
        None, alias='LastSoftwareUpdate'
    )
    NextUpdateAvailabilityDate_1: Optional[NextUpdateAvailabilityDate] = Field(
        None, alias='NextUpdateAvailabilityDate'
    )
    SoftwareUpdatesEndDate_1: Optional[SoftwareUpdatesEndDate] = Field(
        None, alias='SoftwareUpdatesEndDate'
    )
    SupportedGatewayCapacities_1: Optional[SupportedGatewayCapacities] = Field(
        None, alias='SupportedGatewayCapacities'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    VPCEndpoint: Optional[String] = None


class DescribeNFSFileSharesOutput(BaseModel):
    NFSFileShareInfoList_1: Optional[NFSFileShareInfoList] = Field(
        None, alias='NFSFileShareInfoList'
    )


class DescribeSMBFileSharesOutput(BaseModel):
    SMBFileShareInfoList_1: Optional[SMBFileShareInfoList] = Field(
        None, alias='SMBFileShareInfoList'
    )


class DescribeSMBSettingsOutput(BaseModel):
    ActiveDirectoryStatus_1: Optional[ActiveDirectoryStatus] = Field(
        None, alias='ActiveDirectoryStatus'
    )
    DomainName_1: Optional[DomainName] = Field(None, alias='DomainName')
    FileSharesVisible: Optional[Boolean] = None
    GatewayARN_1: Optional[GatewayARN] = Field(None, alias='GatewayARN')
    SMBGuestPasswordSet: Optional[Boolean] = None
    SMBLocalGroups_1: Optional[SMBLocalGroups] = Field(None, alias='SMBLocalGroups')
    SMBSecurityStrategy_1: Optional[SMBSecurityStrategy] = Field(
        None, alias='SMBSecurityStrategy'
    )


class DescribeStorediSCSIVolumesOutput(BaseModel):
    StorediSCSIVolumes_1: Optional[StorediSCSIVolumes] = Field(
        None, alias='StorediSCSIVolumes'
    )
